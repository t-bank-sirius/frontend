"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { Avatar } from "@/enities/Character/types/character.interface"
import type { CreateCharacter } from "@/enities/Character/types/character.interface"
interface CharacterFormProps {
  onSubmit: (data: CreateCharacter) => void
  initialData?: CreateCharacter | null
}

export function CharacterForm({ onSubmit, initialData }: CharacterFormProps) {
  const avatars: Avatar[] = [
    { emoji: "ü§ñ", description: "–†–æ–±–æ—Ç - —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π –∏ –ª–æ–≥–∏—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üë®", description: "–ú—É–∂—á–∏–Ω–∞ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üë©", description: "–ñ–µ–Ω—â–∏–Ω–∞ - —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –∏ —É–º–Ω–∞—è —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü–∞" },
    { emoji: "üßë", description: "–ß–µ–ª–æ–≤–µ–∫ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üë¶", description: "–ú–∞–ª—å—á–∏–∫ - —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üëß", description: "–î–µ–≤–æ—á–∫–∞ - –≤–µ—Å–µ–ª–∞—è –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å" },
    { emoji: "üê±", description: "–ö–æ—Ç - –∏–≥—Ä–∏–≤—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üê∂", description: "–°–æ–±–∞–∫–∞ - –≤–µ—Ä–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–º–ø–∞–Ω—å–æ–Ω" },
    { emoji: "ü¶ä", description: "–õ–∏—Å–∞ - —Ö–∏—Ç—Ä—ã–π –∏ —É–º–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üêº", description: "–ü–∞–Ω–¥–∞ - —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –º—É–¥—Ä—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "ü¶Å", description: "–õ–µ–≤ - —Å–∏–ª—å–Ω—ã–π –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä" },
    { emoji: "üê∏", description: "–õ—è–≥—É—à–∫–∞ - –≤–µ—Å–µ–ª—ã–π –∏ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üêô", description: "–û—Å—å–º–∏–Ω–æ–≥ - –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω—ã–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üëΩ", description: "–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω - –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∏ –Ω–µ–æ–±—ã—á–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üé≠", description: "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è –º–∞—Å–∫–∞ - –∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
    { emoji: "üé™", description: "–¶–∏—Ä–∫ - —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ –≤–µ—Å–µ–ª—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" },
  ]

  // Find initial avatar index if initialData exists
  const getInitialAvatarIndex = () => {
    if (initialData?.shape) {
      const index = avatars.findIndex((avatar) => avatar.emoji === initialData.shape.emoji)
      return index !== -1 ? index : 0
    }
    return 0
  }

  const [currentIndex, setCurrentIndex] = useState(getInitialAvatarIndex())
  const [selectedSex, setSelectedSex] = useState(initialData?.sex || "")
  const [selectedInterests, setSelectedInterests] = useState<string[]>(initialData?.interests || [])
  const [selectedAbilities, setSelectedAbilities] = useState<string[]>(initialData?.abilities || [])
  const [selectedPlaces, setSelectedPlaces] = useState<string[]>(initialData?.places || [])
  const [characterName, setCharacterName] = useState(initialData?.name || "")
  const [additionalDetails, setAdditionalDetails] = useState(initialData?.additionalDetails || "")

  // Update states when initialData changes
  useEffect(() => {
    if (initialData) {
      setCurrentIndex(getInitialAvatarIndex())
      setSelectedSex(initialData.sex || "")
      setSelectedInterests(initialData.interests || [])
      setSelectedAbilities(initialData.abilities || [])
      setSelectedPlaces(initialData.places || [])
      setCharacterName(initialData.name || "")
      setAdditionalDetails(initialData.additionalDetails || "")
    }
  }, [initialData])

  const interests = [
    "–§—É—Ç–±–æ–ª",
    "–ú—É–∑—ã–∫–∞",
    "–ö–∏–Ω–æ",
    "–ö–Ω–∏–≥–∏",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "–ì–æ—Ç–æ–≤–∫–∞",
    "–°–ø–æ—Ä—Ç",
    "–ò—Å–∫—É—Å—Å—Ç–≤–æ",
    "–ò–≥—Ä—ã",
    "–¢–∞–Ω—Ü—ã",
    "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
    "–ü—Ä–∏—Ä–æ–¥–∞",
  ]
  const abilities = [
    "–Æ–º–æ—Ä",
    "–ú—É–¥—Ä–æ—Å—Ç—å",
    "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
    "–õ–æ–≥–∏–∫–∞",
    "–≠–º–ø–∞—Ç–∏—è",
    "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ",
    "–¢–µ—Ä–ø–µ–Ω–∏–µ",
    "–û–ø—Ç–∏–º–∏–∑–º",
    "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "–ò–Ω—Ç—É–∏—Ü–∏—è",
  ]
  const places = [
    "–î–æ–º",
    "–ü–∞—Ä–∫",
    "–ö–∞—Ñ–µ",
    "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",
    "–ü–ª—è–∂",
    "–ì–æ—Ä—ã",
    "–õ–µ—Å",
    "–ì–æ—Ä–æ–¥",
    "–î–µ—Ä–µ–≤–Ω—è",
    "–û—Ñ–∏—Å",
    "–°–ø–æ—Ä—Ç–∑–∞–ª",
    "–¢–µ–∞—Ç—Ä",
  ]

  const nextAvatar = () => {
    setCurrentIndex((prev) => (prev + 1) % avatars.length)
  }

  const prevAvatar = () => {
    setCurrentIndex((prev) => (prev - 1 + avatars.length) % avatars.length)
  }

  const getVisibleAvatars = () => {
    const visible = []
    for (let i = -1; i <= 1; i++) {
      const index = (currentIndex + i + avatars.length) % avatars.length
      visible.push({
        ...avatars[index],
        index: index,
        position: i,
      })
    }
    return visible
  }

  const toggleSelection = (item: string, selectedArray: string[], setSelectedArray: (items: string[]) => void) => {
    if (selectedArray.includes(item)) {
      setSelectedArray(selectedArray.filter((i) => i !== item))
    } else {
      setSelectedArray([...selectedArray, item])
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    const data: CreateCharacter = {
        avatar_img_url: '', //generated image
      shape: avatars[currentIndex],
      name: characterName,
      sex: selectedSex,
      interests: selectedInterests,
      abilities: selectedAbilities,
      places: selectedPlaces,
      additionalDetails: additionalDetails,
    }
    onSubmit(data)
  }

  const ChipSelector = ({
    title,
    items,
    selectedItems,
    onToggle,
  }: {
    title: string
    items: string[]
    selectedItems: string[]
    onToggle: (item: string) => void
  }) => (
    <div className="bg-white/10 backdrop-blur-md border border-white/20 rounded-2xl p-4 shadow-lg">
      <label className="block text-white text-sm font-medium mb-3">{title}</label>
      <div className="flex flex-wrap gap-2">
        {items.map((item) => (
          <button
            key={item}
            type="button"
            onClick={() => onToggle(item)}
            className={`px-3 py-1.5 rounded-full text-sm transition-all duration-200 ${
              selectedItems.includes(item)
                ? "bg-orange-500 text-white shadow-lg"
                : "bg-white/10 text-white/80 hover:bg-white/20 hover:text-white"
            }`}
          >
            {item}
          </button>
        ))}
      </div>
    </div>
  )

  return (
    <>
      {/* Title */}
      <div className="text-center mb-8 text-white">
        <h1 className="text-3xl font-bold mb-2">–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h1>
        <p className="text-lg opacity-90">–ù–∞—Å—Ç—Ä–æ–π –≤–Ω–µ—à–Ω–æ—Å—Ç—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä</p>
      </div>

      {/* Avatar Carousel */}
      <div className="w-full max-w-md mb-8">
        <h2 className="block text-white text-xl font-semibold mb-2 text-center">–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä</h2>
        <p className="text-white/40 text-sm text-center mb-6">–æ—Å—Ç–∞–≤—å—Ç–µ üôÖ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ</p>

        <div className="flex items-center justify-center space-x-4">
          <button
            onClick={prevAvatar}
            className="text-white/60 hover:text-white transition-all duration-200 hover:scale-110 p-2"
          >
            <ChevronLeft size={28} />
          </button>

          <div className="relative w-48 h-20 overflow-hidden">
            <div className="flex items-center justify-center h-full">
              {getVisibleAvatars().map((avatar, index) => (
                <div
                  key={`${avatar.index}-${currentIndex}`}
                  className={`absolute transition-all duration-500 ease-out ${
                    avatar.position === 0
                      ? "transform translate-x-0 scale-125 z-10"
                      : avatar.position === -1
                        ? "transform -translate-x-16 scale-75 opacity-50 z-0"
                        : "transform translate-x-16 scale-75 opacity-50 z-0"
                  }`}
                >
                  <button
                    className={`w-16 h-16 rounded-2xl flex items-center justify-center text-2xl transition-all duration-300 ${
                      avatar.position === 0
                        ? "bg-orange-500 shadow-xl"
                        : "bg-black/90 border border-white/20 hover:bg-black/70 shadow-lg"
                    }`}
                  >
                    {avatar.emoji}
                  </button>
                </div>
              ))}
            </div>
          </div>

          <button
            onClick={nextAvatar}
            className="text-white/60 hover:text-white transition-all duration-200 hover:scale-110 p-2"
          >
            <ChevronRight size={28} />
          </button>
        </div>

        {/* Avatar indicator dots */}
        <div className="flex justify-center mt-4 space-x-1">
          {avatars.slice(0, 8).map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentIndex(index)}
              className={`w-2 h-2 rounded-full transition-all duration-300 ${
                index === currentIndex % 8 ? "bg-black w-6" : "bg-white/30 hover:bg-white/50"
              }`}
            />
          ))}
        </div>
      </div>

      {/* Character Creation Form */}
      <form onSubmit={handleSubmit} className="w-full max-w-md space-y-6 pb-8">
        {/* Name Input */}
        <div>
          <label className="block text-white text-sm font-medium mb-2">–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</label>
          <input
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è..."
            value={characterName}
            onChange={(e) => setCharacterName(e.target.value)}
            className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-transparent"
          />
        </div>

        {/* Sex Choice */}
        <div>
          <label className="block text-white text-sm font-medium mb-3">–ü–æ–ª</label>
          <div className="flex space-x-4">
            <button
              type="button"
              onClick={() => setSelectedSex("male")}
              className={`flex-1 py-3 px-4 rounded-xl transition-all duration-200 ${
                selectedSex === "male"
                  ? "bg-orange-500 text-white shadow-lg"
                  : "bg-white/10 text-white/80 hover:bg-white/20 hover:text-white"
              }`}
            >
              –ú—É–∂—Å–∫–æ–π
            </button>
            <button
              type="button"
              onClick={() => setSelectedSex("female")}
              className={`flex-1 py-3 px-4 rounded-xl transition-all duration-200 ${
                selectedSex === "female"
                  ? "bg-orange-500 text-white shadow-lg"
                  : "bg-white/10 text-white/80 hover:bg-white/20 hover:text-white"
              }`}
            >
              –ñ–µ–Ω—Å–∫–∏–π
            </button>
          </div>
        </div>

        {/* Interests */}
        <ChipSelector
          title="–ò–Ω—Ç–µ—Ä–µ—Å—ã"
          items={interests}
          selectedItems={selectedInterests}
          onToggle={(item) => toggleSelection(item, selectedInterests, setSelectedInterests)}
        />

        {/* Abilities */}
        <ChipSelector
          title="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
          items={abilities}
          selectedItems={selectedAbilities}
          onToggle={(item) => toggleSelection(item, selectedAbilities, setSelectedAbilities)}
        />

        {/* Favourite Places */}
        <ChipSelector
          title="–õ—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞"
          items={places}
          selectedItems={selectedPlaces}
          onToggle={(item) => toggleSelection(item, selectedPlaces, setSelectedPlaces)}
        />

        {/* Additional Details */}
        <div>
          <label className="block text-white text-sm font-medium mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</label>
          <textarea
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ..."
            rows={4}
            value={additionalDetails}
            onChange={(e) => setAdditionalDetails(e.target.value)}
            className="w-full bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-transparent resize-none"
          />
        </div>

        {/* Create Button */}
        <button
          type="submit"
          className="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold py-3 px-6 rounded-xl transition-colors duration-200 mt-6"
        >
          –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        </button>
      </form>
    </>
  )
}